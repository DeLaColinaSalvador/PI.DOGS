{"ast":null,"code":"import { ASCENDENTE, DESCENDENTE, W_ASCENDENTE, W_DESCENDENTE } from \"../../const/sort\";\nimport { FETCH_DOGS, SEARCH_DOGS, SORT_NAME, SORT_WEIGHT } from \"../actions\";\nconst initialState = {\n  dogs: [],\n  filteredDogs: []\n};\nexport default function reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_DOGS:\n      return { ...state,\n        filteredDogs: action.payload.data\n      };\n\n    case SEARCH_DOGS:\n      return { ...state,\n        filteredDogs: action.payload.data\n      };\n\n    case SORT_NAME:\n      let orderedDogsN = [...state.filteredDogs];\n      orderedDogsN.sort((a, b) => {\n        let comparison = a.name.toUpperCase().localeCompare(b.name.toUpperCase());\n        return action.payload === DESCENDENTE ? comparison : comparison * -1;\n      });\n      return { ...state,\n        filteredDogs: orderedDogsN\n      };\n\n    case SORT_WEIGHT:\n      console.log(action.payload);\n      let orderedDogsW = [...state.filteredDogs];\n      let filteredDogsW = orderedDogsW.map(a => {\n        let numberA = Math.ceil(parseInt(a.weightMin));\n        let numberB = Math.ceil(parseInt(a.weightMax));\n\n        if (typeof numberA === \"number\" && typeof numberB === \"number\") {\n          a.avgW = Math.ceil((numberB + numberA) / 2);\n          console.log('both');\n          console.log('max');\n          console.log(a.weightMax);\n          console.log('min');\n          console.log(a.weightMin);\n          console.log('avg');\n          console.log(a.avgW);\n          return a;\n        } else if (typeof numberA === \"number\" && number || Number.isNan(numberB)) {\n          numberB = numberA;\n          a.avgW = Math.ceil((numberB + numberA) / 2);\n          console.log('Min');\n          console.log('max');\n          console.log(a.weightMax);\n          console.log('min');\n          console.log(a.weightMin);\n          console.log('avg');\n          console.log(a.avgW);\n          return a;\n        } else if (typeof numberB === \"number\" || Number.isNan(numberA)) {\n          numberA = numberB;\n          a.avgW = Math.ceil((numberB + numberA) / 2);\n          console.log('Max');\n          console.log('max');\n          console.log(a.weightMax);\n          console.log('min');\n          console.log(a.weightMin);\n          console.log('avg');\n          console.log(a.avgW);\n          return a;\n        } else {\n          numberB = numberA = 0;\n          a.avgW = Math.ceil((numberB + numberA) / 2);\n          console.log('0');\n          console.log('max');\n          console.log(a.weightMax);\n          console.log('min');\n          console.log(a.weightMin);\n          console.log('avg');\n          console.log(a.avgW);\n          return a;\n        }\n\n        console.log(a.weightMax);\n        console.log(a.weightMin);\n      });\n\n      function sortArray(array) {\n        return array.sort((a, b) => {\n          return a.avgW - b.avgW;\n        });\n      }\n\n      let sortedDogsW = sortArray(filteredDogsW);\n      console.log(sortedDogsW);\n\n      if (action.payload === W_DESCENDENTE) {\n        return { ...state,\n          filteredDogs: sortedDogsW\n        };\n      } else {\n        return { ...state,\n          filteredDogs: sortedDogsW.reverse()\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/Salvador/Desktop/-/C/PI.DOGS/client/src/store/reducer/index.js"],"names":["ASCENDENTE","DESCENDENTE","W_ASCENDENTE","W_DESCENDENTE","FETCH_DOGS","SEARCH_DOGS","SORT_NAME","SORT_WEIGHT","initialState","dogs","filteredDogs","reducer","state","action","type","payload","data","orderedDogsN","sort","a","b","comparison","name","toUpperCase","localeCompare","console","log","orderedDogsW","filteredDogsW","map","numberA","Math","ceil","parseInt","weightMin","numberB","weightMax","avgW","number","Number","isNan","sortArray","array","sortedDogsW","reverse"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,WAArB,EAAmCC,YAAnC,EAAkDC,aAAlD,QAAuE,kBAAvE;AACA,SAASC,UAAT,EAAsBC,WAAtB,EAAmCC,SAAnC,EAA8CC,WAA9C,QAAiE,YAAjE;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,EADW;AAEjBC,EAAAA,YAAY,EAAE;AAFG,CAArB;AAKA,eAAe,SAASC,OAAT,GAA+C;AAAA,MAA9BC,KAA8B,uEAAtBJ,YAAsB;AAAA,MAARK,MAAQ;;AAC1D,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKV,UAAL;AACI,aAAM,EACF,GAAGQ,KADD;AAEFF,QAAAA,YAAY,EAAEG,MAAM,CAACE,OAAP,CAAeC;AAF3B,OAAN;;AAIJ,SAAKX,WAAL;AACI,aAAM,EACF,GAAGO,KADD;AAEFF,QAAAA,YAAY,EAAEG,MAAM,CAACE,OAAP,CAAeC;AAF3B,OAAN;;AAIJ,SAAKV,SAAL;AACI,UAAIW,YAAY,GAAG,CAAC,GAAGL,KAAK,CAACF,YAAV,CAAnB;AACAO,MAAAA,YAAY,CAACC,IAAb,CAAkB,CAACC,CAAD,EAAGC,CAAH,KAAQ;AACtB,YAAIC,UAAU,GAAGF,CAAC,CAACG,IAAF,CAAOC,WAAP,GAAqBC,aAArB,CAAmCJ,CAAC,CAACE,IAAF,CAAOC,WAAP,EAAnC,CAAjB;AACA,eAAOV,MAAM,CAACE,OAAP,KAAmBd,WAAnB,GAAiCoB,UAAjC,GAA8CA,UAAU,GAAG,CAAC,CAAnE;AACC,OAHL;AAKA,aAAM,EACF,GAAGT,KADD;AAEFF,QAAAA,YAAY,EAAGO;AAFb,OAAN;;AAIJ,SAAKV,WAAL;AACIkB,MAAAA,OAAO,CAACC,GAAR,CAAYb,MAAM,CAACE,OAAnB;AACA,UAAIY,YAAY,GAAG,CAAC,GAAGf,KAAK,CAACF,YAAV,CAAnB;AACA,UAAIkB,aAAa,GAAGD,YAAY,CAACE,GAAb,CAAkBV,CAAD,IAAK;AACtC,YAAIW,OAAO,GAAGC,IAAI,CAACC,IAAL,CAAUC,QAAQ,CAACd,CAAC,CAACe,SAAH,CAAlB,CAAd;AACA,YAAIC,OAAO,GAAGJ,IAAI,CAACC,IAAL,CAAUC,QAAQ,CAACd,CAAC,CAACiB,SAAH,CAAlB,CAAd;;AACA,YAAI,OAAON,OAAP,KAAiB,QAAjB,IAA6B,OAAOK,OAAP,KAAiB,QAAlD,EAA2D;AACvDhB,UAAAA,CAAC,CAACkB,IAAF,GAAON,IAAI,CAACC,IAAL,CAAU,CAACG,OAAO,GAACL,OAAT,IAAkB,CAA5B,CAAP;AACAL,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYP,CAAC,CAACiB,SAAd;AACAX,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYP,CAAC,CAACe,SAAd;AACAT,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYP,CAAC,CAACkB,IAAd;AACA,iBAAOlB,CAAP;AACH,SAVD,MAUO,IAAI,OAAOW,OAAP,KAAiB,QAAjB,IAA6BQ,MAA7B,IAAsCC,MAAM,CAACC,KAAP,CAAaL,OAAb,CAA1C,EAAgE;AACnEA,UAAAA,OAAO,GAACL,OAAR;AACAX,UAAAA,CAAC,CAACkB,IAAF,GAAON,IAAI,CAACC,IAAL,CAAU,CAACG,OAAO,GAACL,OAAT,IAAkB,CAA5B,CAAP;AACAL,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYP,CAAC,CAACiB,SAAd;AACAX,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYP,CAAC,CAACe,SAAd;AACAT,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYP,CAAC,CAACkB,IAAd;AACA,iBAAOlB,CAAP;AACH,SAXM,MAWA,IAAI,OAAOgB,OAAP,KAAiB,QAAjB,IAA6BI,MAAM,CAACC,KAAP,CAAaV,OAAb,CAAjC,EAAuD;AAC1DA,UAAAA,OAAO,GAACK,OAAR;AACAhB,UAAAA,CAAC,CAACkB,IAAF,GAAON,IAAI,CAACC,IAAL,CAAU,CAACG,OAAO,GAACL,OAAT,IAAkB,CAA5B,CAAP;AACAL,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYP,CAAC,CAACiB,SAAd;AACAX,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYP,CAAC,CAACe,SAAd;AACAT,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYP,CAAC,CAACkB,IAAd;AACA,iBAAOlB,CAAP;AACH,SAXM,MAWA;AACHgB,UAAAA,OAAO,GAAGL,OAAO,GAAG,CAApB;AACAX,UAAAA,CAAC,CAACkB,IAAF,GAAON,IAAI,CAACC,IAAL,CAAU,CAACG,OAAO,GAACL,OAAT,IAAkB,CAA5B,CAAP;AACAL,UAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYP,CAAC,CAACiB,SAAd;AACAX,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYP,CAAC,CAACe,SAAd;AACAT,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYP,CAAC,CAACkB,IAAd;AACA,iBAAOlB,CAAP;AACH;;AACDM,QAAAA,OAAO,CAACC,GAAR,CAAYP,CAAC,CAACiB,SAAd;AACAX,QAAAA,OAAO,CAACC,GAAR,CAAYP,CAAC,CAACe,SAAd;AACH,OAjDmB,CAApB;;AAkDA,eAASO,SAAT,CAAmBC,KAAnB,EAAyB;AACrB,eAAOA,KAAK,CAACxB,IAAN,CAAW,CAACC,CAAD,EAAGC,CAAH,KAAS;AAC3B,iBAAOD,CAAC,CAACkB,IAAF,GAASjB,CAAC,CAACiB,IAAlB;AAAuB,SADhB,CAAP;AAGH;;AACD,UAAIM,WAAW,GAAGF,SAAS,CAACb,aAAD,CAA3B;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYiB,WAAZ;;AACA,UAAI9B,MAAM,CAACE,OAAP,KAAmBZ,aAAvB,EAAqC;AACjC,eAAO,EACH,GAAGS,KADA;AAEHF,UAAAA,YAAY,EAAEiC;AAFX,SAAP;AAIH,OALD,MAMK;AACD,eAAO,EACH,GAAG/B,KADA;AAEHF,UAAAA,YAAY,EAAEiC,WAAW,CAACC,OAAZ;AAFX,SAAP;AAGF;;AAEN;AAAS,aAAOhC,KAAP;AA9Fb;AAgGH","sourcesContent":["import { ASCENDENTE, DESCENDENTE , W_ASCENDENTE , W_DESCENDENTE } from \"../../const/sort\";\r\nimport { FETCH_DOGS , SEARCH_DOGS, SORT_NAME, SORT_WEIGHT } from \"../actions\";\r\n\r\nconst initialState = {\r\n    dogs: [],\r\n    filteredDogs: [],\r\n}\r\n\r\nexport default function reducer(state = initialState, action) {\r\n    switch(action.type) {\r\n        case FETCH_DOGS:\r\n            return{\r\n                ...state,\r\n                filteredDogs: action.payload.data\r\n            }\r\n        case SEARCH_DOGS:\r\n            return{\r\n                ...state,\r\n                filteredDogs: action.payload.data\r\n            }\r\n        case SORT_NAME:\r\n            let orderedDogsN = [...state.filteredDogs];\r\n            orderedDogsN.sort((a,b) =>{\r\n                let comparison = a.name.toUpperCase().localeCompare(b.name.toUpperCase());\r\n                return action.payload === DESCENDENTE ? comparison : comparison * -1\r\n                }\r\n            )\r\n            return{\r\n                ...state,\r\n                filteredDogs : orderedDogsN\r\n            }\r\n        case SORT_WEIGHT:\r\n            console.log(action.payload)\r\n            let orderedDogsW = [...state.filteredDogs];\r\n            let filteredDogsW = orderedDogsW.map((a)=>{\r\n                let numberA = Math.ceil(parseInt(a.weightMin))\r\n                let numberB = Math.ceil(parseInt(a.weightMax))\r\n                if (typeof numberA===\"number\" && typeof numberB===\"number\"){\r\n                    a.avgW=Math.ceil((numberB+numberA)/2)\r\n                    console.log('both')\r\n                    console.log('max')\r\n                    console.log(a.weightMax)\r\n                    console.log('min')\r\n                    console.log(a.weightMin)\r\n                    console.log('avg')\r\n                    console.log(a.avgW)\r\n                    return a\r\n                } else if (typeof numberA===\"number\" && number|| Number.isNan(numberB)){\r\n                    numberB=numberA;\r\n                    a.avgW=Math.ceil((numberB+numberA)/2);\r\n                    console.log('Min')\r\n                    console.log('max')\r\n                    console.log(a.weightMax)\r\n                    console.log('min')\r\n                    console.log(a.weightMin)\r\n                    console.log('avg')\r\n                    console.log(a.avgW)\r\n                    return a\r\n                } else if (typeof numberB===\"number\" || Number.isNan(numberA)){\r\n                    numberA=numberB;\r\n                    a.avgW=Math.ceil((numberB+numberA)/2);\r\n                    console.log('Max')\r\n                    console.log('max')\r\n                    console.log(a.weightMax)\r\n                    console.log('min')\r\n                    console.log(a.weightMin)\r\n                    console.log('avg')\r\n                    console.log(a.avgW)\r\n                    return a\r\n                } else {\r\n                    numberB = numberA = 0\r\n                    a.avgW=Math.ceil((numberB+numberA)/2)\r\n                    console.log('0')\r\n                    console.log('max')\r\n                    console.log(a.weightMax)\r\n                    console.log('min')\r\n                    console.log(a.weightMin)\r\n                    console.log('avg')\r\n                    console.log(a.avgW)\r\n                    return a\r\n                }\r\n                console.log(a.weightMax)\r\n                console.log(a.weightMin)\r\n            })\r\n            function sortArray(array){ \r\n                return array.sort((a,b) => {\r\n                return a.avgW - b.avgW}\r\n                )\r\n            }\r\n            let sortedDogsW = sortArray(filteredDogsW)\r\n            console.log(sortedDogsW)\r\n            if (action.payload === W_DESCENDENTE){\r\n                return {\r\n                    ...state,\r\n                    filteredDogs: sortedDogsW\r\n                }\r\n            }\r\n            else {\r\n                return {\r\n                    ...state,\r\n                    filteredDogs: sortedDogsW.reverse()\r\n            }}\r\n\r\n        default: return state\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}